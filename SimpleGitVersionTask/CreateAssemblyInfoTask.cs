using System;
using System.IO;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System.Reflection;
using System.Linq;

namespace SimpleGitVersion
{

    /// <summary>
    /// This task must be used before compile: it creates a 'SimpleGitVersionTaskAssemblyInfo.g.cs' in <see cref="IntermediateOutputPath"/> 
    /// that defines AssemblyVersion, AssemblyFileVersion and AssemblyInformationalVersion attributes.
    /// </summary>
    public class CreateAssemblyInfoTask : Task
    {
        [Required]
        public string GitSolutionDirectory { get; set; }

        [Required]
        public string IntermediateOutputPath { get; set; }

        [Required]
        public string MajorMinor { get; set; }

        [Required]
        public string MajorMinorPatch { get; set; }

        [Required]
        public string AssemblyFileVersionInfo { get; set; }

        [Required]
        public string AssemblyInformationalVersionInfo { get; set; }

        [Required]
        public string SemVer { get; set; }

        [Output]
        public string AssemblyInfoTempFilePath { get; set; }

        public CreateAssemblyInfoTask()
        {
        }

        const string _format = @"
using System;
using System.Reflection;

// Generated by SimpleGitVersionTask.CreateAssemblyInfoTask.
[assembly: AssemblyVersion(@""{0}"")]
[assembly: AssemblyFileVersion(@""{1}"")]
[assembly: AssemblyInformationalVersion(@""{2}"")]

[assembly: SimpleGitVersionInfo( ""{3}"", ""{4}"", ""{5}"" )]

/// <summary>
/// Automatically generated by SimpleGitVersionTask {3}. 
/// </summary>
class SimpleGitVersionInfoAttribute : Attribute
{{
    public SimpleGitVersionInfoAttribute( string semVer, string buildTimeUtc, string sgvVersion )
    {{
        SemVer = semVer;
        BuildTimeUtc = buildTimeUtc;
        SGVVersion = sgvVersion;
    }}

    public readonly string SemVer;
    public readonly string BuildTimeUtc;
    public readonly string SGVVersion;
    
    public override string ToString()
    {{
        return String.Format( ""SemVer: {{0}}, BuildTimeUtc: {{1}}, SGVVersion: {{2}}"", SemVer, BuildTimeUtc, SGVVersion );
    }}
}}
";

        public override bool Execute()
        {
            try
            {
                object thisAttr = Assembly.GetExecutingAssembly().GetCustomAttributes().Single( a => a.GetType().Name == "SimpleGitVersionInfoAttribute" );
                FieldInfo semVerField = thisAttr.GetType().GetField( "SemVer" );
                object thisVersion = semVerField.GetValue( thisAttr );

                this.LogInfo( string.Format( "SimpleGitVersionTask ({3}): AssemblyVersion = '{0}', AssemblyFileVersion = '{1}', AssemblyInformationalVersion = '{2}'.", MajorMinor, AssemblyFileVersionInfo, AssemblyInformationalVersionInfo, thisVersion ) );
                if( !Directory.Exists( IntermediateOutputPath ) )
                {
                    this.LogInfo( string.Format( "Creating IntermediateOutputPath='{0}' directory.", IntermediateOutputPath ) );
                    Directory.CreateDirectory( IntermediateOutputPath );
                }

                AssemblyInfoTempFilePath = Path.Combine( IntermediateOutputPath, "SimpleGitVersionTaskAssemblyInfo.g.cs" );
                var text = string.Format( _format, 
                    MajorMinor, 
                    AssemblyFileVersionInfo, 
                    AssemblyInformationalVersionInfo, 
                    SemVer, 
                    DateTime.UtcNow.ToString( "u" ),
                    thisVersion );
                File.WriteAllText( AssemblyInfoTempFilePath, text );
                return true;
            }
            catch( Exception exception )
            {
                this.LogError( "Error occurred: " + exception );
                return false;
            }
        }


    }
}
