using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace SimpleGitVersion
{
    public sealed partial class SimpleRepositoryInfo
    {
        /// <summary>
        /// Gets the semantic version of this SimpleGitVersion.Core.
        /// </summary>
        /// <value>This semantic version.</value>
        public static string SGVSemVer
        {
            get
            {
                object thisAttr = typeof( SimpleRepositoryInfo ).Assembly.GetCustomAttributes().Single( a => a.GetType().Name == "SimpleGitVersionInfoAttribute" );
                FieldInfo semVerField = thisAttr.GetType().GetField( "SemVer" );
                return (string)semVerField.GetValue( thisAttr );
            }
        }

        const string _format = @"
// Automatically generated by {6} {3}.
using System;
using System.Reflection;

[assembly: AssemblyVersion(@""{0}"")]
[assembly: AssemblyFileVersion(@""{1}"")]
[assembly: AssemblyInformationalVersion(@""{2}"")]

[assembly: SimpleGitVersionInfo( ""{3}"", ""{4}"", ""{5}"" )]

/// <summary>
/// Automatically generated by {6} {3}. 
/// </summary>
class SimpleGitVersionInfoAttribute : Attribute
{{
    public SimpleGitVersionInfoAttribute( string semVer, string buildTimeUtc, string sgvVersion )
    {{
        SemVer = semVer;
        BuildTimeUtc = buildTimeUtc;
        SGVVersion = sgvVersion;
    }}

    public readonly string SemVer;
    public readonly string BuildTimeUtc;
    public readonly string SGVVersion;
    
    public override string ToString()
    {{
        return String.Format( ""SemVer: {{0}}, BuildTimeUtc: {{1}}, SGVVersion: {{2}}"", SemVer, BuildTimeUtc, SGVVersion );
    }}
}}
";
        /// <summary>
        /// Builds a standard assembly version attributes file.
        /// </summary>
        /// <param name="toolName">Name of the tool.</param>
        /// <param name="assemblyInformationalVersionInfo">
        /// The assembly informational version information.
        /// Defaults to <see cref="FomatStandardAssemblyInformationalVersionInfo"/>.
        /// </param>
        /// <returns>System.String.</returns>
        public string BuildAssemblyVersionAttributesFile( string toolName = "SimpleGitVersion.Core", string assemblyInformationalVersionInfo = null )
        {
            if( assemblyInformationalVersionInfo == null )
            {
                assemblyInformationalVersionInfo = FomatStandardAssemblyInformationalVersionInfo( NuGetVersion, CommitSha, CurrentUserName );
            }
            string text = FormatAssemblyVersionAttributesFile( MajorMinor, DottedOrderedVersion, SemVer, toolName, assemblyInformationalVersionInfo );
            return text;
        }

        /// <summary>
        /// Fomats the standard assembly informational version information: "<see cref="NuGetVersion"/> Sha:... User:..."
        /// </summary>
        /// <param name="nuGetVersion">The NuGet version.</param>
        /// <param name="commitSha">The commit sha.</param>
        /// <param name="userName">Name of the user.</param>
        /// <returns>Standard informational version.</returns>
        public static string FomatStandardAssemblyInformationalVersionInfo( string nuGetVersion, string commitSha, string userName )
        {
            return string.Format( "{0} Sha:{1} User:{2}", nuGetVersion, commitSha, userName );
        }

        /// <summary>
        /// Formats the assembly version attributes file.
        /// </summary>
        /// <param name="majorMinor">The major minor: this is used for the AssemblVersion.</param>
        /// <param name="dottedOrderedVersion">The dotted ordered version, used for the File version.</param>
        /// <param name="semVer">The semantic version version.</param>
        /// <param name="toolName">Name of the tool.</param>
        /// <param name="assemblyInformationalVersionInfo">The assembly informational version information.</param>
        /// <returns>System.String.</returns>
        public static string FormatAssemblyVersionAttributesFile( 
            string majorMinor, 
            string dottedOrderedVersion, 
            string semVer, 
            string toolName, 
            string assemblyInformationalVersionInfo )
        {
            return string.Format( _format,
                majorMinor,
                dottedOrderedVersion,
                assemblyInformationalVersionInfo,
                semVer,
                DateTime.UtcNow.ToString( "u" ),
                SGVSemVer,
                toolName );
        }
    }
}